{ 
    var default_duration = -1, duration_stack = [], last_offset = undefined;
    function setDuration(n, offset) {
        if(Math.abs(last_offset - offset) < 3) return;
        
        duration_stack.push(default_duration);
        default_duration = n;
        
        last_offset = offset;
    }

    function revertDuration() {
        if(duration_stack.length > 0) {
            default_duration = duration_stack.pop();
        } else {
            default_duration = -1;
        }
    } 
}
start = expression

expression =
    ws? e:( noteexpr / sequence / repeat / default ) ws?
    { return e; }

doubleExpression =
    first:expression rest:expression+
    { return [first].concat(rest); }

repeat =
    openTag "r" ws? n:number e:expression closeTag
    { return { tag: 'repeat', section: e, count: n}; }

default =
    openTag "d" ws? n:defaultNumber e:expression closeTag {
        revertDuration();
        return e; 
    }

sequence =
    openTag s:sequenceOpen e:doubleExpression closeTag {
        if (s === 'def') {
           revertDuration();
           s = 'seq';
        }

        var len = e.length - 1, current = 1, result = { tag: s, left: e[0], right: null }, target = result;
        while(current < len) {
            target.right = { tag: s, left: e[current++], right: null };
            target = target.right; 
        }
      
        target.right = e[current];       

        return result; 
    }

functor =
    openTag o:operator ws n:number closeTag
    { return eval(""+default_duration+o+n); } 
  / openTag n:number ws o:operator closeTag
    { return eval(""+n+o+default_duration); }

restexpr =
    "r" &{ return default_duration !== -1; }
    { return { tag: 'rest', duration: default_duration }; }
  / openTag "r" ws d:(number / functor) closeTag
    { return { tag: 'rest', duration: d }; }

noteexpr =
    n:note &{ return default_duration !== -1; }
    { return { tag: 'note', pitch: n, dur: default_duration }; }
  / openTag n:note ws d:(number / functor) closeTag
    { return { tag: 'note', pitch: n, dur: d }; }
  / restexpr

defaultNumber =
    n:(number / functor) 
    { setDuration(n, offset); return n; }

note =
    f:[a-g] s:[0-9]
    { return f + s; }

sequenceOpen =
    "s" { return 'seq'; }
  / "p" { return 'par'; }
  / "d" ws? n:defaultNumber {
        return 'def';
    } 

number = 
    n:[0-9]+
    { return parseInt(n.join(""), 10); } 

ws = whitespace+
whitespace = [ \n\t]
openTag = "(" ws?
closeTag = ")" ws?
operator = [+\-*\/]