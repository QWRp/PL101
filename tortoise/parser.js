TORTOISE = (function(){
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function(input, startRule) {
            var parseFunctions = {
                "start": parse_start,
                "expression": parse_expression,
                "statements": parse_statements,
                "statement": parse_statement,
                "comma_identifier": parse_comma_identifier,
                "ident_list": parse_ident_list,
                "variable": parse_variable,
                "comma_variables": parse_comma_variables,
                "vars_list": parse_vars_list,
                "ternary": parse_ternary,
                "logic_op": parse_logic_op,
                "logic": parse_logic,
                "comp_op": parse_comp_op,
                "comparative": parse_comparative,
                "additive_op": parse_additive_op,
                "additive": parse_additive,
                "mult_op": parse_mult_op,
                "multiplicative": parse_multiplicative,
                "negation": parse_negation,
                "primary": parse_primary,
                "color": parse_color,
                "comma_expression": parse_comma_expression,
                "arglist": parse_arglist,
                "integer": parse_integer,
                "number": parse_number,
                "number_frac": parse_number_frac,
                "validfirstchar": parse_validfirstchar,
                "validchar": parse_validchar,
                "identifier": parse_identifier,
                "comment": parse_comment,
                "ws": parse_ws
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "start";
            }

            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }

                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_start() {
                var result0, result1;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_ws();
                if (result0 !== null) {
                    result1 = parse_statements();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, s) { return s; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_expression() {
                var result0;
                var pos0;

                pos0 = pos;
                result0 = parse_ternary();
                if (result0 !== null) {
                    result0 = (function(offset, expr) { return expr; })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_statements() {
                var result0, result1;

                result0 = [];
                result1 = parse_statement();
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_statement();
                }
                return result0;
            }

            function parse_statement() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_identifier();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        if (input.substr(pos, 2) === ":=") {
                            result2 = ":=";
                            pos += 2;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\":=\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_expression();
                                if (result4 !== null) {
                                    result5 = parse_ws();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos) === 59) {
                                            result6 = ";";
                                            pos++;
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\";\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_ws();
                                            if (result7 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, v, expr) { return { tag:":=", left: v, right: expr }; })(pos0, result0[0], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    if (input.substr(pos, 6) === "define") {
                        result0 = "define";
                        pos += 6;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"define\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_ws();
                        if (result1 !== null) {
                            result2 = parse_identifier();
                            if (result2 !== null) {
                                result3 = parse_ws();
                                if (result3 !== null) {
                                    if (input.charCodeAt(pos) === 40) {
                                        result4 = "(";
                                        pos++;
                                    } else {
                                        result4 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"(\"");
                                        }
                                    }
                                    if (result4 !== null) {
                                        result5 = parse_ws();
                                        if (result5 !== null) {
                                            if (input.charCodeAt(pos) === 41) {
                                                result6 = ")";
                                                pos++;
                                            } else {
                                                result6 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\")\"");
                                                }
                                            }
                                            if (result6 !== null) {
                                                result7 = parse_ws();
                                                if (result7 !== null) {
                                                    if (input.charCodeAt(pos) === 123) {
                                                        result8 = "{";
                                                        pos++;
                                                    } else {
                                                        result8 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"{\"");
                                                        }
                                                    }
                                                    if (result8 !== null) {
                                                        result9 = parse_ws();
                                                        if (result9 !== null) {
                                                            result10 = parse_statements();
                                                            if (result10 !== null) {
                                                                if (input.charCodeAt(pos) === 125) {
                                                                    result11 = "}";
                                                                    pos++;
                                                                } else {
                                                                    result11 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"}\"");
                                                                    }
                                                                }
                                                                if (result11 !== null) {
                                                                    result12 = parse_ws();
                                                                    if (result12 !== null) {
                                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, v, body) { return { tag:"define", name:v, args:[], body:body }; })(pos0, result0[2], result0[10]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        if (input.substr(pos, 6) === "define") {
                            result0 = "define";
                            pos += 6;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"define\"");
                            }
                        }
                        if (result0 !== null) {
                            result1 = parse_ws();
                            if (result1 !== null) {
                                result2 = parse_identifier();
                                if (result2 !== null) {
                                    result3 = parse_ws();
                                    if (result3 !== null) {
                                        if (input.charCodeAt(pos) === 40) {
                                            result4 = "(";
                                            pos++;
                                        } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"(\"");
                                            }
                                        }
                                        if (result4 !== null) {
                                            result5 = parse_ws();
                                            if (result5 !== null) {
                                                result6 = parse_ident_list();
                                                if (result6 !== null) {
                                                    result7 = parse_ws();
                                                    if (result7 !== null) {
                                                        if (input.charCodeAt(pos) === 41) {
                                                            result8 = ")";
                                                            pos++;
                                                        } else {
                                                            result8 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\")\"");
                                                            }
                                                        }
                                                        if (result8 !== null) {
                                                            result9 = parse_ws();
                                                            if (result9 !== null) {
                                                                if (input.charCodeAt(pos) === 123) {
                                                                    result10 = "{";
                                                                    pos++;
                                                                } else {
                                                                    result10 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"{\"");
                                                                    }
                                                                }
                                                                if (result10 !== null) {
                                                                    result11 = parse_ws();
                                                                    if (result11 !== null) {
                                                                        result12 = parse_statements();
                                                                        if (result12 !== null) {
                                                                            if (input.charCodeAt(pos) === 125) {
                                                                                result13 = "}";
                                                                                pos++;
                                                                            } else {
                                                                                result13 = null;
                                                                                if (reportFailures === 0) {
                                                                                    matchFailed("\"}\"");
                                                                                }
                                                                            }
                                                                            if (result13 !== null) {
                                                                                result14 = parse_ws();
                                                                                if (result14 !== null) {
                                                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = pos1;
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, v, args, body) { return { tag:"define", name:v, args:args, body:body }; })(pos0, result0[2], result0[6], result0[12]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            if (input.substr(pos, 3) === "var") {
                                result0 = "var";
                                pos += 3;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"var\"");
                                }
                            }
                            if (result0 !== null) {
                                result1 = parse_ws();
                                if (result1 !== null) {
                                    result2 = parse_vars_list();
                                    if (result2 !== null) {
                                        result3 = parse_ws();
                                        if (result3 !== null) {
                                            if (input.charCodeAt(pos) === 59) {
                                                result4 = ";";
                                                pos++;
                                            } else {
                                                result4 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\";\"");
                                                }
                                            }
                                            if (result4 !== null) {
                                                result5 = parse_ws();
                                                if (result5 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5];
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, v) { return { tag:"var", vars:v }; })(pos0, result0[2]);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                            if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                if (input.substr(pos, 2) === "if") {
                                    result0 = "if";
                                    pos += 2;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"if\"");
                                    }
                                }
                                if (result0 !== null) {
                                    result1 = parse_ws();
                                    if (result1 !== null) {
                                        if (input.charCodeAt(pos) === 40) {
                                            result2 = "(";
                                            pos++;
                                        } else {
                                            result2 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"(\"");
                                            }
                                        }
                                        if (result2 !== null) {
                                            result3 = parse_ws();
                                            if (result3 !== null) {
                                                result4 = parse_expression();
                                                if (result4 !== null) {
                                                    result5 = parse_ws();
                                                    if (result5 !== null) {
                                                        if (input.charCodeAt(pos) === 41) {
                                                            result6 = ")";
                                                            pos++;
                                                        } else {
                                                            result6 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\")\"");
                                                            }
                                                        }
                                                        if (result6 !== null) {
                                                            result7 = parse_ws();
                                                            if (result7 !== null) {
                                                                if (input.charCodeAt(pos) === 123) {
                                                                    result8 = "{";
                                                                    pos++;
                                                                } else {
                                                                    result8 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"{\"");
                                                                    }
                                                                }
                                                                if (result8 !== null) {
                                                                    result9 = parse_ws();
                                                                    if (result9 !== null) {
                                                                        result10 = parse_statements();
                                                                        if (result10 !== null) {
                                                                            if (input.charCodeAt(pos) === 125) {
                                                                                result11 = "}";
                                                                                pos++;
                                                                            } else {
                                                                                result11 = null;
                                                                                if (reportFailures === 0) {
                                                                                    matchFailed("\"}\"");
                                                                                }
                                                                            }
                                                                            if (result11 !== null) {
                                                                                result12 = parse_ws();
                                                                                if (result12 !== null) {
                                                                                    if (input.substr(pos, 4) === "else") {
                                                                                        result13 = "else";
                                                                                        pos += 4;
                                                                                    } else {
                                                                                        result13 = null;
                                                                                        if (reportFailures === 0) {
                                                                                            matchFailed("\"else\"");
                                                                                        }
                                                                                    }
                                                                                    if (result13 !== null) {
                                                                                        result14 = parse_ws();
                                                                                        if (result14 !== null) {
                                                                                            if (input.charCodeAt(pos) === 123) {
                                                                                                result15 = "{";
                                                                                                pos++;
                                                                                            } else {
                                                                                                result15 = null;
                                                                                                if (reportFailures === 0) {
                                                                                                    matchFailed("\"{\"");
                                                                                                }
                                                                                            }
                                                                                            if (result15 !== null) {
                                                                                                result16 = parse_ws();
                                                                                                if (result16 !== null) {
                                                                                                    result17 = parse_statements();
                                                                                                    if (result17 !== null) {
                                                                                                        if (input.charCodeAt(pos) === 125) {
                                                                                                            result18 = "}";
                                                                                                            pos++;
                                                                                                        } else {
                                                                                                            result18 = null;
                                                                                                            if (reportFailures === 0) {
                                                                                                                matchFailed("\"}\"");
                                                                                                            }
                                                                                                        }
                                                                                                        if (result18 !== null) {
                                                                                                            result19 = parse_ws();
                                                                                                            if (result19 !== null) {
                                                                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                                                                                            } else {
                                                                                                                result0 = null;
                                                                                                                pos = pos1;
                                                                                                            }
                                                                                                        } else {
                                                                                                            result0 = null;
                                                                                                            pos = pos1;
                                                                                                        }
                                                                                                    } else {
                                                                                                        result0 = null;
                                                                                                        pos = pos1;
                                                                                                    }
                                                                                                } else {
                                                                                                    result0 = null;
                                                                                                    pos = pos1;
                                                                                                }
                                                                                            } else {
                                                                                                result0 = null;
                                                                                                pos = pos1;
                                                                                            }
                                                                                        } else {
                                                                                            result0 = null;
                                                                                            pos = pos1;
                                                                                        }
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = pos1;
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = pos1;
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                                if (result0 !== null) {
                                    result0 = (function(offset, e, body, else_body) { return { tag:"if", expr:e, body:body, else_body:else_body }; })(pos0, result0[4], result0[10], result0[17]);
                                }
                                if (result0 === null) {
                                    pos = pos0;
                                }
                                if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    if (input.substr(pos, 6) === "repeat") {
                                        result0 = "repeat";
                                        pos += 6;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"repeat\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.substr(pos, 5) === "while") {
                                            result0 = "while";
                                            pos += 5;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"while\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.substr(pos, 2) === "if") {
                                                result0 = "if";
                                                pos += 2;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"if\"");
                                                }
                                            }
                                        }
                                    }
                                    if (result0 !== null) {
                                        result1 = parse_ws();
                                        if (result1 !== null) {
                                            if (input.charCodeAt(pos) === 40) {
                                                result2 = "(";
                                                pos++;
                                            } else {
                                                result2 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"(\"");
                                                }
                                            }
                                            if (result2 !== null) {
                                                result3 = parse_ws();
                                                if (result3 !== null) {
                                                    result4 = parse_expression();
                                                    if (result4 !== null) {
                                                        result5 = parse_ws();
                                                        if (result5 !== null) {
                                                            if (input.charCodeAt(pos) === 41) {
                                                                result6 = ")";
                                                                pos++;
                                                            } else {
                                                                result6 = null;
                                                                if (reportFailures === 0) {
                                                                    matchFailed("\")\"");
                                                                }
                                                            }
                                                            if (result6 !== null) {
                                                                result7 = parse_ws();
                                                                if (result7 !== null) {
                                                                    if (input.charCodeAt(pos) === 123) {
                                                                        result8 = "{";
                                                                        pos++;
                                                                    } else {
                                                                        result8 = null;
                                                                        if (reportFailures === 0) {
                                                                            matchFailed("\"{\"");
                                                                        }
                                                                    }
                                                                    if (result8 !== null) {
                                                                        result9 = parse_ws();
                                                                        if (result9 !== null) {
                                                                            result10 = parse_statements();
                                                                            if (result10 !== null) {
                                                                                if (input.charCodeAt(pos) === 125) {
                                                                                    result11 = "}";
                                                                                    pos++;
                                                                                } else {
                                                                                    result11 = null;
                                                                                    if (reportFailures === 0) {
                                                                                        matchFailed("\"}\"");
                                                                                    }
                                                                                }
                                                                                if (result11 !== null) {
                                                                                    result12 = parse_ws();
                                                                                    if (result12 !== null) {
                                                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                                                    } else {
                                                                                        result0 = null;
                                                                                        pos = pos1;
                                                                                    }
                                                                                } else {
                                                                                    result0 = null;
                                                                                    pos = pos1;
                                                                                }
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                    if (result0 !== null) {
                                        result0 = (function(offset, type, e, body) { return { tag:type, expr:e, body:body }; })(pos0, result0[0], result0[4], result0[10]);
                                    }
                                    if (result0 === null) {
                                        pos = pos0;
                                    }
                                    if (result0 === null) {
                                        pos0 = pos;
                                        pos1 = pos;
                                        if (input.substr(pos, 6) === "repeat") {
                                            result0 = "repeat";
                                            pos += 6;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"repeat\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.substr(pos, 5) === "while") {
                                                result0 = "while";
                                                pos += 5;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"while\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.substr(pos, 2) === "if") {
                                                    result0 = "if";
                                                    pos += 2;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"if\"");
                                                    }
                                                }
                                            }
                                        }
                                        if (result0 !== null) {
                                            result1 = parse_ws();
                                            if (result1 !== null) {
                                                if (input.charCodeAt(pos) === 40) {
                                                    result2 = "(";
                                                    pos++;
                                                } else {
                                                    result2 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"(\"");
                                                    }
                                                }
                                                if (result2 !== null) {
                                                    result3 = parse_ws();
                                                    if (result3 !== null) {
                                                        result4 = parse_expression();
                                                        if (result4 !== null) {
                                                            result5 = parse_ws();
                                                            if (result5 !== null) {
                                                                if (input.charCodeAt(pos) === 41) {
                                                                    result6 = ")";
                                                                    pos++;
                                                                } else {
                                                                    result6 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\")\"");
                                                                    }
                                                                }
                                                                if (result6 !== null) {
                                                                    result7 = parse_ws();
                                                                    if (result7 !== null) {
                                                                        result8 = parse_statement();
                                                                        if (result8 !== null) {
                                                                            result9 = parse_ws();
                                                                            if (result9 !== null) {
                                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                                            } else {
                                                                                result0 = null;
                                                                                pos = pos1;
                                                                            }
                                                                        } else {
                                                                            result0 = null;
                                                                            pos = pos1;
                                                                        }
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                        if (result0 !== null) {
                                            result0 = (function(offset, type, e, s) { return { tag:type, expr:e, body:[s] }; })(pos0, result0[0], result0[4], result0[8]);
                                        }
                                        if (result0 === null) {
                                            pos = pos0;
                                        }
                                        if (result0 === null) {
                                            pos0 = pos;
                                            pos1 = pos;
                                            if (input.substr(pos, 6) === "return") {
                                                result0 = "return";
                                                pos += 6;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"return\"");
                                                }
                                            }
                                            if (result0 !== null) {
                                                result1 = parse_ws();
                                                if (result1 !== null) {
                                                    if (input.charCodeAt(pos) === 59) {
                                                        result2 = ";";
                                                        pos++;
                                                    } else {
                                                        result2 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\";\"");
                                                        }
                                                    }
                                                    if (result2 !== null) {
                                                        result3 = parse_ws();
                                                        if (result3 !== null) {
                                                            result0 = [result0, result1, result2, result3];
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                            if (result0 !== null) {
                                                result0 = (function(offset) { return { tag:"return", expr:0 }; })(pos0);
                                            }
                                            if (result0 === null) {
                                                pos = pos0;
                                            }
                                            if (result0 === null) {
                                                pos0 = pos;
                                                pos1 = pos;
                                                if (input.substr(pos, 6) === "return") {
                                                    result0 = "return";
                                                    pos += 6;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"return\"");
                                                    }
                                                }
                                                if (result0 !== null) {
                                                    result1 = parse_ws();
                                                    if (result1 !== null) {
                                                        result2 = parse_expression();
                                                        if (result2 !== null) {
                                                            result3 = parse_ws();
                                                            if (result3 !== null) {
                                                                if (input.charCodeAt(pos) === 59) {
                                                                    result4 = ";";
                                                                    pos++;
                                                                } else {
                                                                    result4 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\";\"");
                                                                    }
                                                                }
                                                                if (result4 !== null) {
                                                                    result5 = parse_ws();
                                                                    if (result5 !== null) {
                                                                        result0 = [result0, result1, result2, result3, result4, result5];
                                                                    } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                    }
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                                if (result0 !== null) {
                                                    result0 = (function(offset, e) { return { tag:"return", expr:e }; })(pos0, result0[2]);
                                                }
                                                if (result0 === null) {
                                                    pos = pos0;
                                                }
                                                if (result0 === null) {
                                                    pos0 = pos;
                                                    pos1 = pos;
                                                    result0 = parse_expression();
                                                    if (result0 !== null) {
                                                        result1 = parse_ws();
                                                        if (result1 !== null) {
                                                            if (input.charCodeAt(pos) === 59) {
                                                                result2 = ";";
                                                                pos++;
                                                            } else {
                                                                result2 = null;
                                                                if (reportFailures === 0) {
                                                                    matchFailed("\";\"");
                                                                }
                                                            }
                                                            if (result2 !== null) {
                                                                result3 = parse_ws();
                                                                if (result3 !== null) {
                                                                    result0 = [result0, result1, result2, result3];
                                                                } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                }
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                    if (result0 !== null) {
                                                        result0 = (function(offset, expr) { return { tag:"ignore", body:expr }; })(pos0, result0[0]);
                                                    }
                                                    if (result0 === null) {
                                                        pos = pos0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_comma_identifier() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_identifier();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, v) { return v; })(pos0, result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_ident_list() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_identifier();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_comma_identifier();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_comma_identifier();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, first, rest) { return [first].concat(rest); })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_variable() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_identifier();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        if (input.substr(pos, 2) === ":=") {
                            result2 = ":=";
                            pos += 2;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\":=\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_expression();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, v, e) { return { name: v, expr: e }; })(pos0, result0[0], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    pos0 = pos;
                    result0 = parse_identifier();
                    if (result0 !== null) {
                        result0 = (function(offset, v) { return { name: v, expr: 0 }; })(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                }
                return result0;
            }

            function parse_comma_variables() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_variable();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, v) { return v; })(pos0, result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_vars_list() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_variable();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_comma_variables();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_comma_variables();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, first, rest) { return [first].concat(rest); })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_ternary() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_logic();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 63) {
                            result2 = "?";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"?\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_expression();
                                if (result4 !== null) {
                                    result5 = parse_ws();
                                    if (result5 !== null) {
                                        if (input.charCodeAt(pos) === 58) {
                                            result6 = ":";
                                            pos++;
                                        } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            result7 = parse_ws();
                                            if (result7 !== null) {
                                                result8 = parse_expression();
                                                if (result8 !== null) {
                                                    result9 = parse_ws();
                                                    if (result9 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, e, e1, e2) { return { tag:"?:", expr:e, left: e1, right: e2 }; })(pos0, result0[0], result0[4], result0[8]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_logic();
                }
                return result0;
            }

            function parse_logic_op() {
                var result0;

                if (input.substr(pos, 2) === "&&") {
                    result0 = "&&";
                    pos += 2;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"&&\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 2) === "||") {
                        result0 = "||";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"||\"");
                        }
                    }
                }
                return result0;
            }

            function parse_logic() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_comparative();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_logic_op();
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_logic();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_comparative();
                }
                return result0;
            }

            function parse_comp_op() {
                var result0;

                if (input.substr(pos, 2) === "<=") {
                    result0 = "<=";
                    pos += 2;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"<=\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 2) === ">=") {
                        result0 = ">=";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\">=\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos, 2) === "!=") {
                            result0 = "!=";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!=\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 2) === "==") {
                                result0 = "==";
                                pos += 2;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"==\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 60) {
                                    result0 = "<";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"<\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 62) {
                                        result0 = ">";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\">\"");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_comparative() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_additive();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_comp_op();
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_comparative();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_additive();
                }
                return result0;
            }

            function parse_additive_op() {
                var result0;

                if (input.charCodeAt(pos) === 43) {
                    result0 = "+";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"+\"");
                    }
                }
                if (result0 === null) {
                    if (input.charCodeAt(pos) === 45) {
                        result0 = "-";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"-\"");
                        }
                    }
                }
                return result0;
            }

            function parse_additive() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_multiplicative();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_additive_op();
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_additive();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_multiplicative();
                }
                return result0;
            }

            function parse_mult_op() {
                var result0;

                if (input.charCodeAt(pos) === 42) {
                    result0 = "*";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"*\"");
                    }
                }
                if (result0 === null) {
                    if (input.charCodeAt(pos) === 47) {
                        result0 = "/";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"/\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 37) {
                            result0 = "%";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"%\"");
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_multiplicative() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_primary();
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_mult_op();
                        if (result2 !== null) {
                            result3 = parse_ws();
                            if (result3 !== null) {
                                result4 = parse_multiplicative();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, left, op, right) { return { tag:op, left:left, right:right }; })(pos0, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_negation();
                }
                return result0;
            }

            function parse_negation() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 33) {
                    result0 = "!";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"!\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_expression();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, e) { return { tag:"!", expr:e }; })(pos0, result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = parse_primary();
                }
                return result0;
            }

            function parse_primary() {
                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;

                result0 = parse_number();
                if (result0 === null) {
                    result0 = parse_color();
                    if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_identifier();
                        if (result0 !== null) {
                            if (input.charCodeAt(pos) === 40) {
                                result1 = "(";
                                pos++;
                            } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result1 !== null) {
                                result2 = parse_ws();
                                if (result2 !== null) {
                                    if (input.charCodeAt(pos) === 41) {
                                        result3 = ")";
                                        pos++;
                                    } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\")\"");
                                        }
                                    }
                                    if (result3 !== null) {
                                        result0 = [result0, result1, result2, result3];
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, v) { return { tag:"call", name:v, args:[] }; })(pos0, result0[0]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result0 = parse_identifier();
                            if (result0 !== null) {
                                if (input.charCodeAt(pos) === 40) {
                                    result1 = "(";
                                    pos++;
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result1 !== null) {
                                    result2 = parse_ws();
                                    if (result2 !== null) {
                                        result3 = parse_arglist();
                                        if (result3 !== null) {
                                            result4 = parse_ws();
                                            if (result4 !== null) {
                                                if (input.charCodeAt(pos) === 41) {
                                                    result5 = ")";
                                                    pos++;
                                                } else {
                                                    result5 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\")\"");
                                                    }
                                                }
                                                if (result5 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5];
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, v, args) { return { tag:"call", name:v, args:args }; })(pos0, result0[0], result0[3]);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                            if (result0 === null) {
                                pos0 = pos;
                                result0 = parse_identifier();
                                if (result0 !== null) {
                                    result0 = (function(offset, v) { return { tag:'ident', name:v }; })(pos0, result0);
                                }
                                if (result0 === null) {
                                    pos = pos0;
                                }
                                if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    if (input.charCodeAt(pos) === 40) {
                                        result0 = "(";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"(\"");
                                        }
                                    }
                                    if (result0 !== null) {
                                        result1 = parse_ws();
                                        if (result1 !== null) {
                                            result2 = parse_expression();
                                            if (result2 !== null) {
                                                result3 = parse_ws();
                                                if (result3 !== null) {
                                                    if (input.charCodeAt(pos) === 41) {
                                                        result4 = ")";
                                                        pos++;
                                                    } else {
                                                        result4 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\")\"");
                                                        }
                                                    }
                                                    if (result4 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4];
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                    if (result0 !== null) {
                                        result0 = (function(offset, expr) { return expr; })(pos0, result0[2]);
                                    }
                                    if (result0 === null) {
                                        pos = pos0;
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_color() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 35) {
                    result0 = "#";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"#\"");
                    }
                }
                if (result0 !== null) {
                    if (/^[a-fA-F0-9]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-fA-F0-9]");
                        }
                    }
                    if (result2 !== null) {
                        result1 = [];
                        while (result2 !== null) {
                            result1.push(result2);
                            if (/^[a-fA-F0-9]/.test(input.charAt(pos))) {
                                result2 = input.charAt(pos);
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[a-fA-F0-9]");
                                }
                            }
                        }
                    } else {
                        result1 = null;
                    }
                    if (result1 !== null) {
                        result2 = (function(offset, c) { var l = c.length; return (l === 3 || l === 6); })(pos, result1) ? "" : null;
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, c) { return "#" + c.join(""); })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_comma_expression() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\",\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_ws();
                    if (result1 !== null) {
                        result2 = parse_expression();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, expr) { return expr; })(pos0, result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_arglist() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_expression();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_comma_expression();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_comma_expression();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, first, rest) { return [first].concat(rest); })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_integer() {
                var result0, result1;
                var pos0;

                pos0 = pos;
                if (/^[0-9]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function(offset, digits) { return digits.join(""); })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_number() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 45) {
                    result0 = "-";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"-\"");
                    }
                }
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    result1 = parse_integer();
                    if (result1 !== null) {
                        result2 = parse_number_frac();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, minus, base, frac) { return parseFloat(minus + base + frac); })(pos0, result0[0], result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_number_frac() {
                var result0, result1;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 46) {
                    result0 = ".";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\".\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_integer();
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, num) { return "." + num; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_validfirstchar() {
                var result0;

                if (/^[A-Za-z_]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Za-z_]");
                    }
                }
                return result0;
            }

            function parse_validchar() {
                var result0;

                if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Za-z0-9_]");
                    }
                }
                return result0;
            }

            function parse_identifier() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_validfirstchar();
                if (result0 !== null) {
                    result1 = [];
                    result2 = parse_validchar();
                    while (result2 !== null) {
                        result1.push(result2);
                        result2 = parse_validchar();
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, firstchar, chars) { return firstchar + chars.join(""); })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_comment() {
                var result0, result1, result2;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 2) === "//") {
                    result0 = "//";
                    pos += 2;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"//\"");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[^\n\r]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[^\\n\\r]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[^\n\r]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[^\\n\\r]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos0;
                    }
                } else {
                    result0 = null;
                    pos = pos0;
                }
                return result0;
            }

            function parse_ws() {
                var result0, result1, result2;
                var pos0;

                pos0 = pos;
                result0 = [];
                if (/^[ \n\r\t]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[ \\n\\r\\t]");
                    }
                }
                while (result1 !== null) {
                    result0.push(result1);
                    if (/^[ \n\r\t]/.test(input.charAt(pos))) {
                        result1 = input.charAt(pos);
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("[ \\n\\r\\t]");
                        }
                    }
                }
                if (result0 !== null) {
                    result2 = parse_comment();
                    if (result2 !== null) {
                        result1 = [];
                        while (result2 !== null) {
                            result1.push(result2);
                            result2 = parse_comment();
                        }
                    } else {
                        result1 = null;
                    }
                    if (result1 !== null) {
                        result2 = parse_ws();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos0;
                        }
                    } else {
                        result0 = null;
                        pos = pos0;
                    }
                } else {
                    result0 = null;
                    pos = pos0;
                }
                if (result0 === null) {
                    result0 = [];
                    if (/^[ \n\r\t]/.test(input.charAt(pos))) {
                        result1 = input.charAt(pos);
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("[ \\n\\r\\t]");
                        }
                    }
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[ \n\r\t]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[ \\n\\r\\t]");
                            }
                        }
                    }
                }
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }

            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */

                var line = 1;
                var column = 1;
                var seenCR = false;

                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) { line++; }
                        column = 1;
                        seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    } else {
                        column++;
                        seenCR = false;
                    }
                }

                return { line: line, column: column };
            }


            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function() { return this._source; }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();
