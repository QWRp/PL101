start
  = ws s:statements
  { return s; }

expression
  = expr:ternary
    { return expr; }

statements
  = statement*

statement
  = v:identifier ws ":=" ws expr:expression ws ";" ws
    { return { tag:":=", left: v, right: expr }; }
  / "define" ws v:identifier ws "(" ws ")" ws "{" ws body:statements "}" ws
    { return { tag:"define", name:v, args:[], body:body }; }
  / "define" ws v:identifier ws "(" ws args:ident_list ws ")" ws "{" ws body:statements "}" ws
    { return { tag:"define", name:v, args:args, body:body }; }
  / "var" ws v:vars_list ws ";" ws
    { return { tag:"var", vars:v }; }
  / "if" ws "(" ws e:expression ws ")" ws "{" ws body:statements "}" ws "else" ws "{" ws else_body:statements "}" ws
    { return { tag:"if", expr:e, body:body, else_body:else_body }; }
  / type:("repeat" / "while" / "if") ws "(" ws e:expression ws ")" ws "{" ws body:statements "}" ws
    { return { tag:type, expr:e, body:body }; }
  / type:("repeat" / "while" / "if") ws "(" ws e:expression ws ")" ws s:statement ws
    { return { tag:type, expr:e, body:[s] }; }
  / "return" ws ";" ws
    { return { tag:"return", expr:0 }; }
  / "return" ws e:expression ws ";" ws
    { return { tag:"return", expr:e }; }
  / expr:expression ws ";" ws
    { return { tag:"ignore", body:expr }; }

comma_identifier
  = "," ws v:identifier
    { return v; }

ident_list
  = first:identifier rest:comma_identifier*
    { return [first].concat(rest); }

variable
  = v:identifier ws ":=" ws e:expression
    { return { name: v, expr: e }; }
  / v:identifier
    { return { name: v, expr: 0 }; }

comma_variables
  = "," ws v:variable
    { return v; }

vars_list
  = first:variable rest:comma_variables*
    { return [first].concat(rest); }

ternary =
   e:logic ws "?" ws e1:expression ws ":" ws e2:expression ws
   { return { tag:"?:", expr:e, left: e1, right: e2 }; } 
/ logic 

logic_op = "&&" / "||"

logic
  = left:comparative ws op:logic_op ws right:logic
    { return { tag:op, left:left, right:right }; }
    / comparative 

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
  = left:additive ws op:comp_op ws right:comparative
    { return { tag:op, left:left, right:right }; }
    / additive

additive_op = "+" / "-"

additive
  = left:multiplicative ws op:additive_op ws right:additive 
    { return { tag:op, left:left, right:right }; }
  / multiplicative

mult_op = "*" / "/" / "%"

multiplicative
  = left:primary ws op:mult_op ws right:multiplicative 
    { return { tag:op, left:left, right:right }; }
  / negation

negation
  = "!" ws e:expression
  { return { tag:"!", expr:e }; }
  / primary

primary
  = number
  / color
  / v:identifier "(" ws ")"
    { return { tag:"call", name:v, args:[] }; }
  / v:identifier "(" ws args:arglist ws ")"
    { return { tag:"call", name:v, args:args }; }
  / v:identifier
    { return { tag:'ident', name:v }; }
  / "(" ws expr:expression ws ")" 
    { return expr; }

color
  = "#" c:[a-fA-F0-9]+ &{ var l = c.length; return (l === 3 || l === 6); }
    { return "#" + c.join(""); }

comma_expression 
  = "," ws expr:expression
    { return expr; }

arglist
  = first:expression rest:comma_expression*
    { return [first].concat(rest); }

integer
  = digits:[0-9]+ { return digits.join(""); }

number
  = minus:"-"? base:integer frac:number_frac?
    { return parseFloat(minus + base + frac); }

number_frac
  = "." num:integer
    { return "." + num; }

validfirstchar
  = [A-Za-z_]

validchar
  = [A-Za-z0-9_]

identifier
  = firstchar:validfirstchar chars:validchar*
    { return firstchar + chars.join(""); }

comment = "//" [^\n\r]*
ws = [ \n\r\t]* comment+ ws / [ \n\r\t]*